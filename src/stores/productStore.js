import { defineStore } from 'pinia'
import axiosClient from '@/axios'
export const useProductStore = defineStore('product', {
  state: () => ({
    data: [],
    loading: false,
    meta: {},
  }),
  actions: {
    // search = '', page = 1, perPage = 10 = These are default values for the parameters. If u call getProducts(). It looks like this getProducts('', 1, 10)
    async getProducts(search = '', page = 1, perPage = 10, sort_field, sort_direction) {
      this.loading = true
      try {
        const response = await axiosClient.get('/product', {
          //  params: pass query parameters to your Laravel API using Axios. It create a URL like this: /product?search=phone&page=2&per_page=10. Laravel receives these values from request('search'), request('page'), and request('per_page').

          params: {
            search: search,
            page: page,
            per_page: perPage,
            sort_field,
            sort_direction,
          },
        })
        this.data = response.data.data // why data.data because a response has property data and inside that data contains properties such as data, meta,links that are auto-generated by Laravel when we use pagination.
        this.meta = response.data.meta
        return response
      } catch (error) {
        console.error('Failed to fetch products:', error)
      } finally {
        this.loading = false
      }
    },
    async getProductsByUrl(url) {
      this.loading = true
      try {
        const response = await axiosClient.get(url)
        this.data = response.data.data
        this.meta = response.data.meta
      } catch (error) {
        console.error('Failed to fetch page:', error)
      } finally {
        this.loading = false
      }
    },

    // Create Product
    async createProduct(formData) {
      this.loading = true
      try {
        const response = await axiosClient.post('/product', formData)
        return response
      } catch (error) {
        console.error('Failed to create product:', error)
        throw error
      } finally {
        this.loading = false
      }
    },

    // Update Product
    // async updateProduct(id, product) {
    //   this.loading = true
    //   try {
    //     const form = new FormData()

    //     form.append('title', product.title)
    //     form.append('price', product.price)
    //     form.append('description', product.description)

    //     // only append image if it's a File (new upload)
    //     if (product.image instanceof File) {
    //       form.append('image', product.image)
    //     }

    //     const response = await axiosClient.post(`/product/${id}?_method=PUT`, form)
    //     return response
    //   } catch (error) {
    //     console.error('Update failed:', error)
    //     throw error
    //   } finally {
    //     this.loading = false
    //   }
    // },
  },
})
